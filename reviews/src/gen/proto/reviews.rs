// This file is @generated by prost-build.
/// Add new messages for CRUD operations
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReviewRequest {
    #[prost(string, tag = "1")]
    pub review_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub tenant_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReviewResponse {
    #[prost(message, optional, tag = "1")]
    pub review: ::core::option::Option<Review>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateReviewRequest {
    #[prost(string, tag = "1")]
    pub review_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub score: u32,
    #[prost(string, tag = "4")]
    pub comment: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateReviewResponse {
    #[prost(message, optional, tag = "1")]
    pub review: ::core::option::Option<Review>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteReviewRequest {
    #[prost(string, tag = "1")]
    pub review_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub tenant_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteReviewResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Model za oceno in komentar
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Review {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub app_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
    /// ocena od 1-5
    #[prost(uint32, tag = "4")]
    pub score: u32,
    #[prost(string, tag = "5")]
    pub comment: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub is_moderated: bool,
    #[prost(enumeration = "ModerationType", tag = "8")]
    pub moderation_status: i32,
    #[prost(string, tag = "9")]
    pub tenant_id: ::prost::alloc::string::String,
}
/// Request za dodajanje ocen
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddReviewRequest {
    #[prost(string, tag = "1")]
    pub app_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub score: u32,
    #[prost(string, tag = "4")]
    pub comment: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub tenant_id: ::prost::alloc::string::String,
}
/// Response ob dodatku ocene
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddReviewResponse {
    #[prost(message, optional, tag = "1")]
    pub review: ::core::option::Option<Review>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// Request za pridobivanje ocen
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReviewsRequest {
    #[prost(string, tag = "1")]
    pub app_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub page: u32,
    #[prost(uint32, tag = "3")]
    pub page_size: u32,
    #[prost(bool, tag = "4")]
    pub include_moderated_only: bool,
    #[prost(string, tag = "5")]
    pub tenant_id: ::prost::alloc::string::String,
}
/// Response ob pridobitvi ocen
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReviewsResponse {
    #[prost(message, repeated, tag = "1")]
    pub reviews: ::prost::alloc::vec::Vec<Review>,
    #[prost(uint32, tag = "2")]
    pub total_count: u32,
    #[prost(double, tag = "3")]
    pub average_score: f64,
}
/// Request za moderiranje komentarja
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModerateCommentRequest {
    #[prost(string, tag = "1")]
    pub review_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ModerationType", tag = "2")]
    pub moderation_status: i32,
    #[prost(string, tag = "3")]
    pub moderator_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub moderation_note: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub tenant_id: ::prost::alloc::string::String,
}
/// Response ob moderiranju komentarja
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModerateCommentResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub updated_review: ::core::option::Option<Review>,
}
/// Enum za status moderacije
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ModerationType {
    Pending = 0,
    Approved = 1,
    Rejected = 2,
}
impl ModerationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Pending => "PENDING",
            Self::Approved => "APPROVED",
            Self::Rejected => "REJECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PENDING" => Some(Self::Pending),
            "APPROVED" => Some(Self::Approved),
            "REJECTED" => Some(Self::Rejected),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod review_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ReviewServiceServer.
    #[async_trait]
    pub trait ReviewService: std::marker::Send + std::marker::Sync + 'static {
        /// Create
        async fn add_review(
            &self,
            request: tonic::Request<super::AddReviewRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddReviewResponse>,
            tonic::Status,
        >;
        /// Read
        async fn get_review(
            &self,
            request: tonic::Request<super::GetReviewRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetReviewResponse>,
            tonic::Status,
        >;
        async fn get_reviews(
            &self,
            request: tonic::Request<super::GetReviewsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetReviewsResponse>,
            tonic::Status,
        >;
        /// Update
        async fn update_review(
            &self,
            request: tonic::Request<super::UpdateReviewRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateReviewResponse>,
            tonic::Status,
        >;
        /// Delete
        async fn delete_review(
            &self,
            request: tonic::Request<super::DeleteReviewRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteReviewResponse>,
            tonic::Status,
        >;
        /// Existing moderation endpoint
        async fn moderate_comment(
            &self,
            request: tonic::Request<super::ModerateCommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ModerateCommentResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ReviewServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ReviewServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ReviewServiceServer<T>
    where
        T: ReviewService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/reviews.ReviewService/AddReview" => {
                    #[allow(non_camel_case_types)]
                    struct AddReviewSvc<T: ReviewService>(pub Arc<T>);
                    impl<
                        T: ReviewService,
                    > tonic::server::UnaryService<super::AddReviewRequest>
                    for AddReviewSvc<T> {
                        type Response = super::AddReviewResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddReviewRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReviewService>::add_review(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddReviewSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reviews.ReviewService/GetReview" => {
                    #[allow(non_camel_case_types)]
                    struct GetReviewSvc<T: ReviewService>(pub Arc<T>);
                    impl<
                        T: ReviewService,
                    > tonic::server::UnaryService<super::GetReviewRequest>
                    for GetReviewSvc<T> {
                        type Response = super::GetReviewResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetReviewRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReviewService>::get_review(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetReviewSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reviews.ReviewService/GetReviews" => {
                    #[allow(non_camel_case_types)]
                    struct GetReviewsSvc<T: ReviewService>(pub Arc<T>);
                    impl<
                        T: ReviewService,
                    > tonic::server::UnaryService<super::GetReviewsRequest>
                    for GetReviewsSvc<T> {
                        type Response = super::GetReviewsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetReviewsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReviewService>::get_reviews(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetReviewsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reviews.ReviewService/UpdateReview" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateReviewSvc<T: ReviewService>(pub Arc<T>);
                    impl<
                        T: ReviewService,
                    > tonic::server::UnaryService<super::UpdateReviewRequest>
                    for UpdateReviewSvc<T> {
                        type Response = super::UpdateReviewResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateReviewRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReviewService>::update_review(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateReviewSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reviews.ReviewService/DeleteReview" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteReviewSvc<T: ReviewService>(pub Arc<T>);
                    impl<
                        T: ReviewService,
                    > tonic::server::UnaryService<super::DeleteReviewRequest>
                    for DeleteReviewSvc<T> {
                        type Response = super::DeleteReviewResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteReviewRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReviewService>::delete_review(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteReviewSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/reviews.ReviewService/ModerateComment" => {
                    #[allow(non_camel_case_types)]
                    struct ModerateCommentSvc<T: ReviewService>(pub Arc<T>);
                    impl<
                        T: ReviewService,
                    > tonic::server::UnaryService<super::ModerateCommentRequest>
                    for ModerateCommentSvc<T> {
                        type Response = super::ModerateCommentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ModerateCommentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ReviewService>::moderate_comment(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ModerateCommentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ReviewServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "reviews.ReviewService";
    impl<T> tonic::server::NamedService for ReviewServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
