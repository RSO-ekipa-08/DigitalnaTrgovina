// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app/v1/app.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RSO-ekipa-08/DigitalnaTrgovina/app-service/gen/app/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApplicationServiceName is the fully-qualified name of the ApplicationService service.
	ApplicationServiceName = "app.v1.ApplicationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApplicationServiceCreateApplicationProcedure is the fully-qualified name of the
	// ApplicationService's CreateApplication RPC.
	ApplicationServiceCreateApplicationProcedure = "/app.v1.ApplicationService/CreateApplication"
	// ApplicationServiceGetApplicationProcedure is the fully-qualified name of the ApplicationService's
	// GetApplication RPC.
	ApplicationServiceGetApplicationProcedure = "/app.v1.ApplicationService/GetApplication"
	// ApplicationServiceUpdateApplicationProcedure is the fully-qualified name of the
	// ApplicationService's UpdateApplication RPC.
	ApplicationServiceUpdateApplicationProcedure = "/app.v1.ApplicationService/UpdateApplication"
	// ApplicationServiceDeleteApplicationProcedure is the fully-qualified name of the
	// ApplicationService's DeleteApplication RPC.
	ApplicationServiceDeleteApplicationProcedure = "/app.v1.ApplicationService/DeleteApplication"
	// ApplicationServiceSearchApplicationsProcedure is the fully-qualified name of the
	// ApplicationService's SearchApplications RPC.
	ApplicationServiceSearchApplicationsProcedure = "/app.v1.ApplicationService/SearchApplications"
	// ApplicationServiceListCategoriesProcedure is the fully-qualified name of the ApplicationService's
	// ListCategories RPC.
	ApplicationServiceListCategoriesProcedure = "/app.v1.ApplicationService/ListCategories"
	// ApplicationServiceDownloadApplicationProcedure is the fully-qualified name of the
	// ApplicationService's DownloadApplication RPC.
	ApplicationServiceDownloadApplicationProcedure = "/app.v1.ApplicationService/DownloadApplication"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	applicationServiceServiceDescriptor                   = v1.File_app_v1_app_proto.Services().ByName("ApplicationService")
	applicationServiceCreateApplicationMethodDescriptor   = applicationServiceServiceDescriptor.Methods().ByName("CreateApplication")
	applicationServiceGetApplicationMethodDescriptor      = applicationServiceServiceDescriptor.Methods().ByName("GetApplication")
	applicationServiceUpdateApplicationMethodDescriptor   = applicationServiceServiceDescriptor.Methods().ByName("UpdateApplication")
	applicationServiceDeleteApplicationMethodDescriptor   = applicationServiceServiceDescriptor.Methods().ByName("DeleteApplication")
	applicationServiceSearchApplicationsMethodDescriptor  = applicationServiceServiceDescriptor.Methods().ByName("SearchApplications")
	applicationServiceListCategoriesMethodDescriptor      = applicationServiceServiceDescriptor.Methods().ByName("ListCategories")
	applicationServiceDownloadApplicationMethodDescriptor = applicationServiceServiceDescriptor.Methods().ByName("DownloadApplication")
)

// ApplicationServiceClient is a client for the app.v1.ApplicationService service.
type ApplicationServiceClient interface {
	// Application management
	CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error)
	UpdateApplication(context.Context, *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error)
	DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error)
	// Search and discovery
	SearchApplications(context.Context, *connect.Request[v1.SearchApplicationsRequest]) (*connect.Response[v1.SearchApplicationsResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	// Download management
	DownloadApplication(context.Context, *connect.Request[v1.DownloadApplicationRequest]) (*connect.Response[v1.DownloadApplicationResponse], error)
}

// NewApplicationServiceClient constructs a client for the app.v1.ApplicationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApplicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &applicationServiceClient{
		createApplication: connect.NewClient[v1.CreateApplicationRequest, v1.CreateApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceCreateApplicationProcedure,
			connect.WithSchema(applicationServiceCreateApplicationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getApplication: connect.NewClient[v1.GetApplicationRequest, v1.GetApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceGetApplicationProcedure,
			connect.WithSchema(applicationServiceGetApplicationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApplication: connect.NewClient[v1.UpdateApplicationRequest, v1.UpdateApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceUpdateApplicationProcedure,
			connect.WithSchema(applicationServiceUpdateApplicationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteApplication: connect.NewClient[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceDeleteApplicationProcedure,
			connect.WithSchema(applicationServiceDeleteApplicationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchApplications: connect.NewClient[v1.SearchApplicationsRequest, v1.SearchApplicationsResponse](
			httpClient,
			baseURL+ApplicationServiceSearchApplicationsProcedure,
			connect.WithSchema(applicationServiceSearchApplicationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCategories: connect.NewClient[v1.ListCategoriesRequest, v1.ListCategoriesResponse](
			httpClient,
			baseURL+ApplicationServiceListCategoriesProcedure,
			connect.WithSchema(applicationServiceListCategoriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		downloadApplication: connect.NewClient[v1.DownloadApplicationRequest, v1.DownloadApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceDownloadApplicationProcedure,
			connect.WithSchema(applicationServiceDownloadApplicationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// applicationServiceClient implements ApplicationServiceClient.
type applicationServiceClient struct {
	createApplication   *connect.Client[v1.CreateApplicationRequest, v1.CreateApplicationResponse]
	getApplication      *connect.Client[v1.GetApplicationRequest, v1.GetApplicationResponse]
	updateApplication   *connect.Client[v1.UpdateApplicationRequest, v1.UpdateApplicationResponse]
	deleteApplication   *connect.Client[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse]
	searchApplications  *connect.Client[v1.SearchApplicationsRequest, v1.SearchApplicationsResponse]
	listCategories      *connect.Client[v1.ListCategoriesRequest, v1.ListCategoriesResponse]
	downloadApplication *connect.Client[v1.DownloadApplicationRequest, v1.DownloadApplicationResponse]
}

// CreateApplication calls app.v1.ApplicationService.CreateApplication.
func (c *applicationServiceClient) CreateApplication(ctx context.Context, req *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// GetApplication calls app.v1.ApplicationService.GetApplication.
func (c *applicationServiceClient) GetApplication(ctx context.Context, req *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// UpdateApplication calls app.v1.ApplicationService.UpdateApplication.
func (c *applicationServiceClient) UpdateApplication(ctx context.Context, req *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error) {
	return c.updateApplication.CallUnary(ctx, req)
}

// DeleteApplication calls app.v1.ApplicationService.DeleteApplication.
func (c *applicationServiceClient) DeleteApplication(ctx context.Context, req *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// SearchApplications calls app.v1.ApplicationService.SearchApplications.
func (c *applicationServiceClient) SearchApplications(ctx context.Context, req *connect.Request[v1.SearchApplicationsRequest]) (*connect.Response[v1.SearchApplicationsResponse], error) {
	return c.searchApplications.CallUnary(ctx, req)
}

// ListCategories calls app.v1.ApplicationService.ListCategories.
func (c *applicationServiceClient) ListCategories(ctx context.Context, req *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return c.listCategories.CallUnary(ctx, req)
}

// DownloadApplication calls app.v1.ApplicationService.DownloadApplication.
func (c *applicationServiceClient) DownloadApplication(ctx context.Context, req *connect.Request[v1.DownloadApplicationRequest]) (*connect.Response[v1.DownloadApplicationResponse], error) {
	return c.downloadApplication.CallUnary(ctx, req)
}

// ApplicationServiceHandler is an implementation of the app.v1.ApplicationService service.
type ApplicationServiceHandler interface {
	// Application management
	CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error)
	UpdateApplication(context.Context, *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error)
	DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error)
	// Search and discovery
	SearchApplications(context.Context, *connect.Request[v1.SearchApplicationsRequest]) (*connect.Response[v1.SearchApplicationsResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	// Download management
	DownloadApplication(context.Context, *connect.Request[v1.DownloadApplicationRequest]) (*connect.Response[v1.DownloadApplicationResponse], error)
}

// NewApplicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationServiceHandler(svc ApplicationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	applicationServiceCreateApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceCreateApplicationProcedure,
		svc.CreateApplication,
		connect.WithSchema(applicationServiceCreateApplicationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceGetApplicationProcedure,
		svc.GetApplication,
		connect.WithSchema(applicationServiceGetApplicationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceUpdateApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceUpdateApplicationProcedure,
		svc.UpdateApplication,
		connect.WithSchema(applicationServiceUpdateApplicationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceDeleteApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceDeleteApplicationProcedure,
		svc.DeleteApplication,
		connect.WithSchema(applicationServiceDeleteApplicationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceSearchApplicationsHandler := connect.NewUnaryHandler(
		ApplicationServiceSearchApplicationsProcedure,
		svc.SearchApplications,
		connect.WithSchema(applicationServiceSearchApplicationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceListCategoriesHandler := connect.NewUnaryHandler(
		ApplicationServiceListCategoriesProcedure,
		svc.ListCategories,
		connect.WithSchema(applicationServiceListCategoriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceDownloadApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceDownloadApplicationProcedure,
		svc.DownloadApplication,
		connect.WithSchema(applicationServiceDownloadApplicationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/app.v1.ApplicationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApplicationServiceCreateApplicationProcedure:
			applicationServiceCreateApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceGetApplicationProcedure:
			applicationServiceGetApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceUpdateApplicationProcedure:
			applicationServiceUpdateApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceDeleteApplicationProcedure:
			applicationServiceDeleteApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceSearchApplicationsProcedure:
			applicationServiceSearchApplicationsHandler.ServeHTTP(w, r)
		case ApplicationServiceListCategoriesProcedure:
			applicationServiceListCategoriesHandler.ServeHTTP(w, r)
		case ApplicationServiceDownloadApplicationProcedure:
			applicationServiceDownloadApplicationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApplicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationServiceHandler struct{}

func (UnimplementedApplicationServiceHandler) CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ApplicationService.CreateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ApplicationService.GetApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) UpdateApplication(context.Context, *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ApplicationService.UpdateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ApplicationService.DeleteApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) SearchApplications(context.Context, *connect.Request[v1.SearchApplicationsRequest]) (*connect.Response[v1.SearchApplicationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ApplicationService.SearchApplications is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ApplicationService.ListCategories is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DownloadApplication(context.Context, *connect.Request[v1.DownloadApplicationRequest]) (*connect.Response[v1.DownloadApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.ApplicationService.DownloadApplication is not implemented"))
}
